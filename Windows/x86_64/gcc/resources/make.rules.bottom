# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# Windows/x86_64/gcc

# On Windows you can choose the subsystem to be Windows or Console.
ifeq "$(subsystem)" ""
  subsystem := Console
endif

# Windows specific preprocessor definitions.
windows_preprocessor_definitions = $(common_preprocessor_definitions) $(features) WIN64 BOOST_ALL_NO_LIB
ifeq "$(project_type)" "program"
  ifeq "$(subsystem)" "Console"
    windows_preprocessor_definitions += _CONSOLE
  else
    windows_preprocessor_definitions += _WINDOWS
  endif
endif
ifeq "$(config)" "Debug"
  windows_preprocessor_definitions += _DEBUG
else
  windows_preprocessor_definitions += NDEBUG
endif

# Convert include directories form Cygwin path to Windows path.
windows_include_directories = $(windowspath $(include_directories))

# thekogans_make
thekogans_make = $(get_toolchain_program thekogans,make)

# thekogans_nasm
nasm = $(get_toolchain_program thekogans,nasm)
nasm_flags += -fwin64
nasm_preprocessor_definitions += __x86_64__
ifeq "$(config)" "Debug"
  nasm_flags += -g -O0
else
  nasm_flags += -Ox
endif
nasm_dependencies_flags =\
  -MT $@ -M -MF $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
make_nasm_dependencies =\
  "$(nasm)" $(nasm_flags) $(nasm_dependencies_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
nasm_it =\
  "$(nasm)" $(nasm_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# gcc
gcc = $(TOOLCHAIN_GCC_DIR)/gcc.exe
gcc_flags = -c -m64 -Wall -fno-common -pipe -march=native
ifeq "$(config)" "Debug"
  gcc_flags += -g
else
  gcc_flags += -O3
endif
gcc_dependencies_flags =\
  -MT $@ -MM -MP -MF $(subst .$(object_suffix),.$(dependencies_suffix),$@)

# c compiler
make_c_dependencies =\
  "$(gcc)" $(gcc_flags) $(gcc_dependencies_flags) $(c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
c_compile_it =\
  "$(gcc)" $(gcc_flags) $(c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# g++
gpp = $(TOOLCHAIN_GCC_DIR)/g++.exe
gpp_flags = -std=c++11 $(gcc_flags)

# cpp compiler
make_cpp_dependencies =\
  "$(gpp)" $(gpp_flags) $(gcc_dependencies_flags) $(cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
cpp_compile_it =\
  "$(gpp)" $(gpp_flags) $(cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# objective-c compiler
make_objective_c_dependencies =\
  "$(gcc)" $(gcc_flags) $(gcc_dependencies_flags) $(objective_c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(objective_c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
objective_c_compile_it =\
  "$(gcc)" $(gcc_flags) $(objective_c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(objective_c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# objective-cpp compiler
make_objective_cpp_dependencies =\
  "$(gpp)" $(gpp_flags) $(gcc_dependencies_flags) $(objective_cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(objective_cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
objective_cpp_compile_it =\
  "$(gpp)" $(gpp_flags) $(objective_cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(objective_cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# rc_compiler
rc_compiler = $(TOOLCHAIN_GCC_DIR)/windres.exe
rc_compile_it =\
  "$(rc_compiler)" $(rc_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(rc_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -fo$(windowspath $@) $(windowspath $<)

# librarian
ar = $(TOOLCHAIN_GCC_DIR)/ar.exe
ar_flags += rc

ifneq (,$(filter $(project_type),library plugin))
  ifeq "$(type)" "Shared"
    link_it =\
      "$(gpp)" $(gpp_linker_flags) $(linker_flags) -o $@ $(objects) $(link_libraries)
  else
    link_it =\
      "$(ar)" $(ar_flags) $(librarian_flags) $@ $(objects);\
      ranlib $@
  endif
else
  link_it =\
    "$(gpp)" $(gpp_linker_flags) $(linker_flags) -o $@ $(objects) $(link_libraries);
  ifeq "$(config)" "Release"
    link_it += "$(TOOLCHAIN_GCC_DIR)/strip.exe" $@
  endif
endif

ifeq "$(MAKECMDGOALS)" "tests"
  test_link_it =\
    "$(gpp)" $(gpp_linker_flags) $(linker_flags) -o $@ $< $(goal) $(link_libraries);
  ifeq "$(config)" "Release"
    test_link_it += "$(TOOLCHAIN_GCC_DIR)/strip.exe" $@
  endif
endif
