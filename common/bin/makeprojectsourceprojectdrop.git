#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# This script will create a version stamped *.tar.gz drop of
# the given organization project and optionally install it in
# to "$SOURCES_ROOT"/"$organization"/projects.

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN/setenvironment" ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN/setenvironment" "$@"
fi

organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
url=
project="$TOOLCHAIN_DEFAULT_PROJECT"
version=
add_source=yes
git_schema="$TOOLCHAIN_GIT_SCHEMA"
git_host="$TOOLCHAIN_GIT_HOST"
git_user="$TOOLCHAIN_GIT_USER"
git_url="$TOOLCHAIN_GIT_URL"

for i in "$@"; do
    case $i in
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -u:*|--url:*)
            url="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -v:*|--version:*)
            version="${i#*:}"
            ;;
        -a:*|--add-source:*)
            add_source="${i#*:}"
            ;;
        -gs:*|--git-schema:*)
            git_schema="${i#*:}"
            ;;
        -gh:*|--git-host:*)
            git_host="${i#*:}"
            ;;
        -gu:*|--git-user:*)
            git_user="${i#*:}"
            ;;
        --git-url:*)
            git_url="${i#*:}"
            ;;
    esac
done

# Verify arguments.
common_options="\
[[-o | --organization]:organization] \
[[-u | --url]:url] \
[[-p | --project]:project] \
[[-v | --version]:version] \
[[-a | --add_source]:[yes | no]]"

git_options="\
[[-gs | --git-schema]:[https | git | ssh | ...]] \
[[-gh | --git-host]:[github.com | ...]] \
[[-gu | --git-user]:user]"

if [ "$organization" == "" ] || [ "$project" == "" ]; then
    echo "usage: $0 \
$environment_options \
$common_options \
$git_options or"
        echo "       $0 \
$environment_options \
$common_options \
[[--git-url]:url]"
    exit 1
fi

if [ "$git_url" == "" ]; then
    if [ "$git_schema" == "" ] || [ "$git_host" == "" ] || [ "$git_user" == "" ]; then
        echo "usage: $0 \
$environment_options \
$common_options \
$git_options or"
        echo "       $0 \
$environment_options \
$common_options \
[[--git-url]:url]"
        exit 1
    fi
    git_url="$git_schema://$git_host/$git_user"
fi

project_drops="$DEVELOPMENT_ROOT/$organization/${project//_//}/drops"
if [ ! -d "$project_drops" ]; then
    mkdir -p "$project_drops"
    check_errors $?
fi
cd "$project_drops"

project_root="$organization/${project//_//}"

if [ -d foo ]; then
    rm -rf foo
    check_errors $?
fi

# Check out the source tree.
git clone "$git_url/$project.git" "foo/$project_root"
check_errors $?

# Clean up the source tree.
cd foo
check_errors $?
find . -name ".git" -print0 | xargs -0 rm -rf
check_errors $?
find . -name "*.h" -print0 | xargs -0 chmod 664
check_errors $?
find . -name "*.cpp" -print0 | xargs -0 chmod 664
check_errors $?

# Package the source tree.
if [ "$version" == "" ]; then
    version="$(get_project_version -pr:$project_root)"
    check_errors $?
fi
mv "$project_root" "$project_root-$version"
check_errors $?
tarball="$organization"_"$project-$version.tar.gz"
tar zcvf "../$tarball" "$organization"
check_errors $?

if [ "$add_source" == "yes" ]; then
    "$(get_toolchain_program -o:thekogans -p:make)"\
        -a:create_source\
        -o:"$organization"\
        -u:"$url"
    check_errors $?
    source="$SOURCES_ROOT"/"$organization"
    if [ ! -d "$source"/projects ]; then
        mkdir -p "$source"/projects
        check_errors $?
    fi
    cp -v ../"$tarball" "$source"/projects
    check_errors $?
    pushd "$source"
    check_errors $?
    git add projects/"$tarball"
    sha2_256=`$(get_toolchain_program -o:thekogans -p:hash) -h:SHA2 -d:256 -n projects/$tarball`
    "$(get_toolchain_program -o:thekogans -p:make)"\
        -a:add_source_project\
        -o:"$organization"\
        -p:"$project"\
        -v:"$version"\
        -s:"$sha2_256"
    check_errors $?
    git commit -m "Added projects/$tarball." Source.xml projects/"$tarball"
    check_errors $?
    git push
    check_errors $?
    popd
fi

# Clean up.
cd ..
check_errors $?
rm -rf foo
check_errors $?
cd ..
check_errors $?

exit 0
