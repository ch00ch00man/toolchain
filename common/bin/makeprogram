#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# This script will configure a directory tree and some
# helpful starter files for a new organization program.

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN"/setenvironment ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN"/setenvironment "$@"
fi

organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
project=
template=
svc=

for i in "$@"; do
    case $i in
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -t:*|--template:*)
            template="${i#*:}"
            ;;
        -s:*|--svc:*)
            svc="${i#*:}"
            ;;
    esac
done

if [ "$organization" == "" ] || [ "$project" == "" ]; then
    echo "usage: $0 \
$environment_options \
[[-o | --organization]:organization] \
[-p | --project]:project \
[[-t | --template]:template] \
[[-s | --svc]:[svn | git]]"
    exit 1
fi

project_root="$DEVELOPMENT_ROOT"/"$organization"/"${project//_//}"
if [ ! -d "$project_root" ]; then
    mkdir -p "$project_root"
    check_errors $?
fi
cd "$project_root"
check_errors $?

if [ "$svc" == "" ]; then
    svc="$(get_default_svc -o:$organization)"
fi
if [ "$svc" == "svn" ]; then
    mkdir trunk branches tags
    check_errors $?
    cd trunk
    check_errors $?
fi
mkdir -p include/"${organization}"/"${project//_//}" src resources doc tests
check_errors $?
if [ "$svc" == "git" ]; then
    touch resources/.keep doc/.keep tests/.keep
    check_errors $?
    cp -v "$TOOLCHAIN_ROOT"/common/resources/.gitignore .gitignore
    check_errors $?
fi
touch README ReleaseNotes
check_errors $?

ORGANIZATION=`echo ${organization} | tr '[:lower:]' '[:upper:]'`
PROJECT=`echo ${project} | tr '[:lower:]' '[:upper:]'`

cat > include/"${organization}"/"${project//_//}"/Version.h << EOF
#if !defined (__${organization}_${project}_Version_h)
#define __${organization}_${project}_Version_h

#include <thekogans/util/Version.h>

$(begin_namespace -o:$organization -p:$project)

$(indent_namespace -o:$organization -p:$project -e:$example)/// \brief
$(indent_namespace -o:$organization -p:$project -e:$example)/// Return the compiled ${organization}_${project} version.
$(indent_namespace -o:$organization -p:$project -e:$example)/// \return Compiled ${organization}_${project} version.
$(indent_namespace -o:$organization -p:$project -e:$example)const thekogans::util::Version &GetVersion ();

$(end_namespace -o:$organization -p:$project)

#endif // !defined (__${organization}_${project}_Version_h)
EOF
check_errors $?

cat > src/main.cpp << EOF
int main (
        int /*argc*/,
        const char * /*argv*/ []) {
    return 0;
}
EOF
check_errors $?

cat > src/Version.cpp << EOF
#include "${organization}/${project//_//}/Version.h"

using namespace thekogans;

$(begin_namespace -o:$organization -p:$project)

$(indent_namespace -o:$organization -p:$project -e:$example)const util::Version &GetVersion () {
$(indent_namespace -o:$organization -p:$project -e:$example)    static const util::Version version (
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_MAJOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_MINOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_PATCH_VERSION);
$(indent_namespace -o:$organization -p:$project -e:$example)    return version;
$(indent_namespace -o:$organization -p:$project -e:$example)}

$(end_namespace -o:$organization -p:$project)
EOF
check_errors $?

cat > thekogans_make.xml << EOF
<thekogans_make organization = "${organization}"
                project = "${project}"
                project_type = "program"
                major_version = "0"
                minor_version = "1"
                patch_version = "0"
                guid = "`$(get_toolchain_program -o:thekogans -p:genguid)`"
                schema_version = "`$(get_toolchain_program -o:thekogans -p:make) -a:get_schema_version`">
  <dependencies>
    <dependency organization = "thekogans"
                name = "util"/>
  </dependencies>
  <cpp_headers prefix = "include">
    <cpp_header>\$(organization)/\$(project_directory)/Version.h</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>main.cpp</cpp_source>
    <cpp_source>Version.cpp</cpp_source>
  </cpp_sources>
  <if condition = "\$(TOOLCHAIN_OS) == 'Windows'">
    <subsystem>Console</subsystem>
  </if>
</thekogans_make>
EOF
check_errors $?

if [ "$template" != "" ]; then
    cp -v "$TOOLCHAIN_ROOT"/common/resources/main."$template" src/main.cpp
    check_errors $?
fi

exit 0
